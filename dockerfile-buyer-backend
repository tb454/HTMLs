# FastAPI backend for BRidge Buyer Portal - With Postgres, PDF, OpenAPI, and Dossier Sync Endpoint

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime, date
from sqlalchemy import create_engine, Column, String, Float, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import csv
import base64
import os
import uuid
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from io import BytesIO

app = FastAPI(title="BRidge API", description="ICE-ready digital commodities trade + BOL platform.", version="1.0")

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://bridge_user:bridge_pass@localhost/bridge_db")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class BOL(Base):
    __tablename__ = "bols"
    bol_id = Column(String, primary_key=True, index=True)
    contract_id = Column(String)
    buyer = Column(String)
    seller = Column(String)
    material = Column(String)
    weight_tons = Column(Float)
    price_per_unit = Column(Float)
    total_value = Column(Float)
    carrier_name = Column(String)
    carrier_driver = Column(String)
    carrier_truck_vin = Column(String)
    pickup_signature = Column(Text)
    pickup_time = Column(DateTime)
    delivery_signature = Column(Text, nullable=True)
    delivery_time = Column(DateTime, nullable=True)
    status = Column(String)

class User(Base):
    __tablename__ = "users"
    username = Column(String, primary_key=True)
    password = Column(String)
    role = Column(String)

Base.metadata.create_all(bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class CarrierInfo(BaseModel):
    name: str
    driver: str
    truck_vin: str

class Signature(BaseModel):
    base64: str
    timestamp: datetime

class BOLRecord(BaseModel):
    bol_id: str
    contract_id: str
    buyer: str
    seller: str
    material: str
    weight_tons: float
    price_per_unit: float
    total_value: float
    carrier: CarrierInfo
    pickup_signature: Signature
    delivery_signature: Optional[Signature] = None
    pickup_time: datetime
    delivery_time: Optional[datetime] = None
    status: str

class LoginRequest(BaseModel):
    username: str
    password: str

@app.post("/login")
def login(data: LoginRequest, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == data.username).first()
    if not user or user.password != data.password:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    return {"message": "Login successful", "role": user.role, "username": user.username}

@app.post("/create_bol")
def create_bol(record: BOLRecord, db: Session = Depends(get_db)):
    new_bol = BOL(
        bol_id=record.bol_id,
        contract_id=record.contract_id,
        buyer=record.buyer,
        seller=record.seller,
        material=record.material,
        weight_tons=record.weight_tons,
        price_per_unit=record.price_per_unit,
        total_value=record.total_value,
        carrier_name=record.carrier.name,
        carrier_driver=record.carrier.driver,
        carrier_truck_vin=record.carrier.truck_vin,
        pickup_signature=record.pickup_signature.base64,
        pickup_time=record.pickup_time,
        delivery_signature=record.delivery_signature.base64 if record.delivery_signature else None,
        delivery_time=record.delivery_time,
        status=record.status
    )
    db.add(new_bol)
    db.commit()
    db.refresh(new_bol)
    return {"message": "BOL created", "bol_id": new_bol.bol_id}

@app.get("/sync_dossier")
def sync_dossier(request: Request, db: Session = Depends(get_db), date_filter: Optional[date] = None):
    query = db.query(BOL).filter(BOL.status == "Delivered")
    if date_filter:
        query = query.filter(BOL.delivery_time >= datetime.combine(date_filter, datetime.min.time()))

    results = []
    for r in query.all():
        results.append({
            "bol_id": r.bol_id,
            "contract_id": r.contract_id,
            "buyer": r.buyer,
            "seller": r.seller,
            "material": r.material,
            "weight_tons": r.weight_tons,
            "price_per_ton": r.price_per_unit,
            "total_value": r.total_value,
            "pickup_time": r.pickup_time.isoformat(),
            "delivery_time": r.delivery_time.isoformat() if r.delivery_time else None,
            "carrier": {
                "name": r.carrier_name,
                "driver": r.carrier_driver,
                "truck_number": r.carrier_truck_vin
            },
            "signatures": {
                "pickup": bool(r.pickup_signature),
                "delivery": bool(r.delivery_signature)
            },
            "status": r.status
        })

    return results
