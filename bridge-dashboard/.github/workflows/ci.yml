name: CI
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bridge
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s --health-timeout=5s --health-retries=30

    env:
      ENV: ci
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bridge
      PGHOST: localhost
      PGPORT: "5432"
      PGDATABASE: bridge
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest fastapi "sqlalchemy" "databases[postgres]" asyncpg \
                      "psycopg[binary]" passlib[bcrypt] python-dotenv requests \
                      reportlab itsdangerous slowapi structlog prometheus-client \
                      prometheus-fastapi-instrumentator python-multipart uvicorn

      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if psql "$DATABASE_URL" -c "SELECT 1" >/dev/null 2>&1; then
              echo "Postgres is up"; break
            fi
            echo "Waiting for Postgres ($i/30)..."; sleep 2
          done

      - name: Bootstrap schema (same DB the app uses)
        run: |
          echo "Using $DATABASE_URL"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          -- === USERS (matches /login: username + is_active) ===
          CREATE TABLE IF NOT EXISTS public.users (
            id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
            username      text UNIQUE NOT NULL,
            email         text,
            password_hash text NOT NULL,
            role          text NOT NULL CHECK (role IN ('admin','seller','buyer')),
            is_active     boolean NOT NULL DEFAULT TRUE,
            created_at    timestamptz NOT NULL DEFAULT now()
          );

          -- Seed one admin (safe if already present); hash = bcrypt('admin123!')
          INSERT INTO public.users (username, email, password_hash, role)
          VALUES ('admin', 'admin@example.com',
                  '$2b$12$2Gm2pTprQFOi6eZy8XgY2e4qz4Q4rE9o7QbP1m1o6K6a8y8vQ0a6i',
                  'admin')
          ON CONFLICT (username) DO NOTHING;

          -- === CONTRACTS (matches your inserts/queries) ===
          CREATE TABLE IF NOT EXISTS public.contracts (
            id             uuid PRIMARY KEY,
            buyer          text NOT NULL,
            seller         text NOT NULL,
            material       text NOT NULL,
            weight_tons    numeric NOT NULL,
            price_per_ton  numeric NOT NULL,
            status         text NOT NULL DEFAULT 'Pending'
                             CHECK (status IN ('Pending','Signed','Dispatched','Fulfilled','Cancelled')),
            created_at     timestamptz NOT NULL DEFAULT now(),
            signed_at      timestamptz,
            signature      text
          );

          CREATE INDEX IF NOT EXISTS idx_contracts_mat_status
            ON public.contracts(material, created_at DESC, status);

          -- === BOLs (exact to your code) ===
          CREATE TABLE IF NOT EXISTS public.bols (
            bol_id                     uuid PRIMARY KEY,
            contract_id                uuid NOT NULL REFERENCES public.contracts(id) ON DELETE CASCADE,
            buyer                      text,
            seller                     text,
            material                   text,
            weight_tons                numeric,
            price_per_unit             numeric,
            total_value                numeric,
            carrier_name               text,
            carrier_driver             text,
            carrier_truck_vin          text,
            pickup_signature_base64    text,
            pickup_signature_time      timestamptz,
            pickup_time                timestamptz,
            delivery_signature_base64  text,
            delivery_signature_time    timestamptz,
            delivery_time              timestamptz,
            status                     text
          );

          CREATE INDEX IF NOT EXISTS idx_bols_contract     ON public.bols(contract_id);
          CREATE INDEX IF NOT EXISTS idx_bols_pickup_time  ON public.bols(pickup_time DESC);

          -- === Inventory (so tests donâ€™t depend on startup order) ===
          CREATE TABLE IF NOT EXISTS public.inventory_items (
            seller        text NOT NULL,
            sku           text NOT NULL,
            description   text,
            uom           text,
            location      text,
            qty_on_hand   numeric NOT NULL DEFAULT 0,
            qty_reserved  numeric NOT NULL DEFAULT 0,
            qty_committed numeric NOT NULL DEFAULT 0,
            source        text,
            updated_at    timestamptz NOT NULL DEFAULT now(),
            PRIMARY KEY (seller, sku)
          );

          CREATE TABLE IF NOT EXISTS public.inventory_movements (
            seller        text NOT NULL,
            sku           text NOT NULL,
            movement_type text NOT NULL,
            qty           numeric NOT NULL,
            ref_contract  text,
            meta          jsonb,
            created_at    timestamptz NOT NULL DEFAULT now()
          );

          ALTER TABLE public.inventory_items
            ADD CONSTRAINT IF NOT EXISTS chk_qty_on_hand_nonneg   CHECK (qty_on_hand   >= 0),
            ADD CONSTRAINT IF NOT EXISTS chk_qty_reserved_nonneg  CHECK (qty_reserved  >= 0),
            ADD CONSTRAINT IF NOT EXISTS chk_qty_committed_nonneg CHECK (qty_committed >= 0);
          SQL

      - name: Show tables (debug)
        run: psql "$DATABASE_URL" -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public' ORDER BY table_name;"

      - name: Run tests
        run: pytest -q
