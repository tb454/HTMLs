name: CI
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bridge
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s --health-timeout=5s --health-retries=30

    env:
      ENV: ci
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bridge
      PGHOST: localhost
      PGPORT: "5432"
      PGDATABASE: bridge
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest fastapi "sqlalchemy" "databases[postgres]" asyncpg \
                     "psycopg[binary]" passlib[bcrypt] python-dotenv requests \
                     reportlab itsdangerous slowapi structlog prometheus-client \
                     python-multipart uvicorn

      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Bootstrap schema (same DB the app uses)
        run: |
          echo "Using $DATABASE_URL"
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 <<'SQL'
          -- === USERS (your app hard-fails if missing) ===
          CREATE TABLE IF NOT EXISTS users (
            id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
            email         text UNIQUE NOT NULL,
            password_hash text NOT NULL,
            role          text NOT NULL CHECK (role IN ('admin','seller','buyer')),
            created_at    timestamptz NOT NULL DEFAULT now()
          );

          -- Minimal tables used by tests/endpoints
          CREATE TABLE IF NOT EXISTS contracts (
            id           uuid PRIMARY KEY DEFAULT gen_random_uuid(),
            buyer        text NOT NULL,
            seller       text NOT NULL,
            material     text NOT NULL,
            status       text NOT NULL DEFAULT 'Pending'
                          CHECK (status IN ('Pending','Signed','Dispatched','Fulfilled','Cancelled')),
            created_at   timestamptz NOT NULL DEFAULT now(),
            updated_at   timestamptz NOT NULL DEFAULT now()
          );

          CREATE TABLE IF NOT EXISTS bols (
            id           uuid PRIMARY KEY DEFAULT gen_random_uuid(),
            contract_id  uuid REFERENCES contracts(id) ON DELETE CASCADE,
            buyer        text,
            seller       text,
            material     text,
            weight_tons  numeric,
            price_per_unit numeric,
            total_value  numeric,
            pickup_time  timestamptz,
            carrier      jsonb,
            pickup_signature jsonb,
            status       text NOT NULL DEFAULT 'Created',
            created_at   timestamptz NOT NULL DEFAULT now()
          );

          CREATE TABLE IF NOT EXISTS idempotency_keys (
            key         text PRIMARY KEY,
            created_at  timestamptz NOT NULL DEFAULT now()
          );

          CREATE TABLE IF NOT EXISTS webhook_events (
            id               bigserial PRIMARY KEY,
            source           text,
            headers_json     jsonb,
            body_json        jsonb,
            signature_valid  boolean,
            created_at       timestamptz NOT NULL DEFAULT now()
          );

          -- Seed one admin (safe if already present)
          INSERT INTO users (email, password_hash, role)
          VALUES ('admin@example.com', '$2b$12$2Gm2pTprQFOi6eZy8XgY2e4qz4Q4rE9o7QbP1m1o6K6a8y8vQ0a6i', 'admin')
          ON CONFLICT (email) DO NOTHING;
          SQL

      - name: Show tables (debug)
        run: psql "$DATABASE_URL" -c "SELECT table_name FROM information_schema.tables WHERE table_schema='public' ORDER BY table_name;"

      - name: Run tests
        run: pytest -q
